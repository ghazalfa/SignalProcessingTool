pub mod mods;
use core::time;
use std::time::Instant;
use std::vec;
use funspace::chebyshev::ortho::Chebyshev;
use ndarray::Array1;
use mods::datatype::RawData;
use mods::math::math;
use mods::digital_filters::fir::{lowpass,highpass,bandpass,notch,moving_average};
use mods::fast_fourier_transform;
use mods::data_resampling::DataResampling;
use mods::peak_finder::Peak_Finder;
//use mods::short_time_fourier_transform::Stft;

use biquad::*;

use crate::mods::digital_filters::fir::moving_average::moving_average_filter;

 fn main() {
  let signal: Vec<f32> = vec![63.99092630573587, 66.93696212356637, 70.21186315215436, 72.36973560013404, 71.11691135495082, 72.63754606973377, 72.65395183291722, 75.30769614499027, 72.34117224206321, 77.94792439244716, 73.93653252960603, 73.16497446824744, 74.65046589424942, 76.60137059484963, 77.17220449634708, 75.17682133758099, 76.48440991268191, 69.78105590076562, 77.75759492612978, 76.76624671261732, 75.05522885106886, 74.8900271929814, 78.24017247168905, 74.7911936054381, 73.93608544656938, 75.67611078132667, 73.87176381605543, 72.1317125984629, 74.19877370154555, 72.07262313345595, 66.16883909800117, 68.1234902846226, 67.9940521390197, 65.42287053804934, 62.365956284123406, 60.04226883410055, 60.37717874300646, 55.53905436534224, 52.789704377060225, 50.37831112573574, 50.09561898488419, 46.93412132002783, 42.11709863850101, 39.76188683251867, 38.176357058481294, 37.21377515533896, 36.57319371907161, 37.86710474449615, 37.51110302251426, 38.01662204416805, 35.12063062871996, 37.68283006198349, 39.143206292654284, 38.60738557046368, 41.31484490676405, 41.220896579006194, 40.09217525798975, 43.67250050799976, 48.16500030176038, 49.7101714366566, 49.582736715378154, 52.849703260421485, 54.287539988359256, 56.09883494119873, 61.251691546334854, 64.33828157245358, 62.27228748630153, 67.36046250199826, 69.51407928634843, 67.89944661604514, 70.94101282412565, 68.54096316500365, 73.40703302077047, 74.16412190109143, 71.58386452207274, 74.37321161593195, 76.17570392004909, 74.95815925469977, 73.04582603985054, 75.49199300610965, 74.65308833683778, 74.87414470359361, 77.33256788202083, 75.90883899498165, 76.36509000999601, 74.22920625532309, 73.79628679837059, 73.8495207513345, 78.33929484818184, 71.63706577736632, 72.82496818713668, 73.03871088309309, 72.21305640010098, 72.97719010877614, 71.61501898999207, 74.31052317335187, 67.02612175608851, 66.58828615058007, 68.62452187014583, 66.1958948289469];

  //let signal: Vec<f32> = vec![-1.598935703239191, -1.3538923428682053, -1.9971044760515737, -3.669929254038298, -6.059692597444933, -4.406446190187621, -4.982022739958942, -6.1904643403474235, -6.117749181565894, -5.409773369910325, -4.095527901721767, -5.768569771772228, -4.6779992575059755, 0.027228161752891555, -1.7021247778023765, 0.8404876170914433, 2.514162738570337, 2.3853149109040235, 2.457908393885536, 2.809147828447005, 4.365757710955929, 4.033985498936102, 5.791114212455222, 3.3147369090532117, 3.2614537155771828, 4.768375153172741, 5.37567825380866, 4.99343306723956, 1.704804989012299, 2.5230717358431254, 1.3103177666665542, 1.2875274955354985, 0.09412853117813086, -1.5124745023112163, -2.0362954784033263, -2.745898135244847, -3.522154334091142, -4.332827462978904, -5.433378294286429, -4.87634716977199, -4.840999788227962, -4.6253636910882, -4.595767403943643, -5.061133869724398, -4.983783612552994, -2.8566234525510787, -2.592776869202281, -2.1813944007834403, -1.5194513611627363, 1.0195908840806196, 1.1035261808149612, 2.857149950719965, 3.7896990518311457, 5.309829248238059, 5.04427893853336, 3.772471096910595, 5.310320009017052, 5.702434507249795, 2.9541759287200864, 4.564182619770868, 3.014121256180702, 5.3401787577835504, 1.2037481998143922, 1.881923193474165, 0.9835303644621084, -1.6312134637966271, -1.6676291806815429, -1.9465081072282504, -2.2503941508762897, -2.432347153003348, -3.9865706852343026, -4.994896645040312, -3.6765835487942926, -4.840847604154758, -3.573775084835173, -4.9598911999187605, -5.086987502832228, -3.407989065978458, -3.500229614318988, -2.4094794925740954, -1.2422855108803568, 1.1471060188584012, 0.9859888945381199, 0.6955698019268306, 3.463269221191572, 3.487438678936024, 3.614248951971734, 1.5710742079943016, 5.332499713583492, 4.982383299158594, 4.162919112434463, 5.001917839282863, 5.068765127799142, 3.478053549939116, 3.868820782365421, 2.09159531427174, 4.0102614971978054, 3.4037554410440327, -0.4119534345411444, -0.5233643543305041, -2.865677615436368, -2.4184633329096914, -2.9815080672941128, -3.6215835448363274, -5.5574593575564775, -3.406702828907175, -7.742024929649126, -4.580025857711, -3.3524101179218118, -4.867024120189513, -3.516640318735603, -4.11696070415308, -2.099899342372034, -1.9606190845245002, -0.6048500154082965, -1.688506771132665, -1.09535839678137, 1.7897103761360231, 1.5142925147960027, 2.5411062699992346, 2.3901431872866077, 4.093293579629426, 6.119664295589269, 4.679551405991381, 4.909411927137437, 3.0821562833867246, 4.851643303048878, 2.7083320010447016, 4.541329364621987, 3.601344577720784, 1.68471304604059, 1.2072360483616205, 0.6221760505399846, -2.674023034135616, -1.3634745947488758, -3.2711202511556086, -3.933957515973355, -4.1077416048838655, -4.001013688709154, -3.2790376125619094, -6.200337306630127, -4.7815059442380665, -5.059523890554143, -1.8243731348304149, -2.3205663875636136, -2.1393035233425803, -2.7299350122546837, -2.7042607265138803, -1.4247243651999333, 1.5254065636004006, -1.2706346737303678, 4.489202224015316, 4.218759436111417, 3.3540368876271036, 4.766990378943102, 4.2181284675319155, 4.923007854816755, 5.235680510036534, 5.088778153569207, 6.540494364934323, 2.0848323685967554, 4.169207169756401, 3.043996092133985, 0.7971387643797395, 1.0408499862318144, -2.389505031080188, -1.2554607894334446, -3.638718641036488, -2.0503018099668555, -4.750964725272822, -3.3987044481073463, -5.311527067563168, -6.517114997045374, -4.841800945357271, -6.485276026297424, -3.1272068981326178, -2.6378382773701077, -5.53865545206766, -0.9594829674480865, -2.50414638055771, -2.4768313721995785, -0.5039629941926501, -1.4474636513635741, 1.415105330179886, 3.1028889691364983, 3.8883766689363517, 5.28699553616294, 3.911520744641432, 4.117607369587459, 5.166519987947583, 4.846024061851284, 5.389836545845434, 3.444520844015783, 4.276881590755873, 2.996090527275383, 2.962752505136181, 1.2028825767861737, 0.709234679215027, 0.3834502635777045, -1.987506940347406, -0.4357733665482031, -2.0056281362680255, -1.6087841113977932, -5.064323820411376, -6.01118507974807, -4.525564248322529, -3.2940431237288417, -5.522583431425581, -5.254962316372168, -3.203096993550232, -4.37053945283397, -2.9917896297080575, -1.86989486473927, -0.49755464663881677, -0.6772235834787552, 1.2107730999056094, 1.8556029275811246, 1.910327651303326, 2.1833266702590075, 2.046611674072622, 3.983820664406066, 4.001142418098876, 3.768731444056173, 4.295294057083293, 3.6040523872460626, 6.511129799785574, 2.3325637349798423, 3.780061571785328, 3.4194369469147454, 2.1125480027798456, 1.3832912745654216, 0.8117944782047246, 0.4577659182374352, -3.000793177706746, -1.8169168296093128, -3.93952317437746, -2.599487102415929, -5.331036146113484, -4.994712004135089, -4.63198922597466, -6.108443645155568, -5.676848036431704, -5.563586152454521, -5.205555739702098, -2.670935586406768, -3.4752103369611986, -1.9142683954600312, -1.3839352923650483, -0.2611606889018963];

  let float_vector1: RawData = RawData::FloatVec(signal);

  let mut filter = Peak_Finder::new();

  let output = filter.run_peakfinder(&float_vector1);

  let mut my_empty_vec: Vec<usize> = Vec::new();

  for element in output{
    let number = element.middle_position();
    my_empty_vec.push(number);
  }

  my_empty_vec.sort();

  for element in my_empty_vec{
    println!("{}", element);
  }






   let input: Vec<f32> = vec![0.91836795, -0.7550365, -0.82229968, 0.38470112, 0.32756556, -0.1500332,
   -0.47942242, 0.78735185, -0.3130074, -0.78962053, 0.68406937, -0.10941988,
   0.85765562, -0.33443927, -0.88293069, -0.45943362, 0.7827355, -0.98156005,
   0.1983309, 1.0490953, 0.78269412, 0.48753985, -0.4683345, -0.08328862,
   0.47133147, 0.85514289, 0.02800922, 0.07371882, -0.28892876, 0.89355418,
   0.20687296, -0.98254069, 0.73257495, 0.97115261, 0.88601853, 0.49660099,
   -0.60699654, 0.99018712, 0.74853154, 1.03390956, 0.56113442, 0.93391565,
   -0.34803287, -0.49468972, 0.54351342, 0.54288017, 0.56071839, -0.6816979,
   0.44131403, 0.71416583, -0.20408451, -0.52847594, -0.86575061, 0.3189754,
   0.03358667, -0.62728735, -0.19742717, -0.08853031, 0.82239147, 0.38570716,
   -0.24534994, -0.55948792, 0.25647286, -0.60632081, 1.00364816, -0.40964857,
   0.84938726, -0.54761025, 0.86841654, -0.9697848, 0.81779373, -0.74209949,
   -0.01043969, 0.0437089, 0.91153038, 0.37510173, 0.6870717, -0.51927701,
   0.22990968, -0.11206606, -0.70855284, -0.68672557, 0.34639136, 0.07711553,
   0.74687533, -0.86588636, 0.60308048, 0.44784163, -0.48820096, -0.26549696,
   0.6144216, 0.44270719, 0.28133413, -0.79150201, 0.05373624, -0.59698319,
   -0.44591376, 0.16755127, 0.27518268, 0.40648236];
    // let int_vector1: RawData = RawData::FloatVec(input);

    // let mut filter: Stft = Stft::new(0.1, 0.05);

    // let output: Vec<Vec<f32>> = filter.run(input);


    //let mut filter: fast_fourier_transform::Fft = fast_fourier_transform::Fft::new();
  
    // let real_part: Vec<f32> = filter.run_forward_real(&int_vector1);
    // let imag_part: Vec<f32> = filter.run_forward_imag(&int_vector1);



    // let before = Instant::now();
    // let mut filter: bandpass::butterworth::biquad_butterworth = bandpass::butterworth::biquad_butterworth::new(cutoff_freq, sample_rate);

    // let result: Vec<f32> = filter.filtfilt(float1);
    // println!("Elapsed time: {:.2?}", before.elapsed());


   // print!("{:?}",result);



  // let mut time_storage: Vec<f32> = Vec::new();

  //   for _ in 0..50 {


  //     let before = Instant::now();

  //     let mut filter = moving_average_filter::moving_average_filter::new();

  //     let output = filter.process(&int_vector1);

  //     time_storage.push(before.elapsed().as_secs_f32())

  // }

  //    let average: f32 = time_storage.iter().sum::<f32>() / time_storage.len() as f32;
  //    println!("Elapsed time: {}", average);

 
    //  // Print the real and imaginary parts
    //  println!("Real Part: {:?}", real_part);
    //  println!("Imaginary Part: {:?}", imag_part);

    // let vector = RawData::FloatVec(vec![1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]);

    // let data: DataResampling = DataResampling::new();

    // let return_vector = data.resampling_by_increment(&vector,33.0,100.0);

    // print!{"{:?}", return_vector};



}


        

    


    


