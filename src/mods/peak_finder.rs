use crate::RawData;
use find_peaks::{self, Peak};


/// The `PeakFinder` struct provides methods for detecting peaks in data vectors, facilitating peak analysis
/// and feature extraction. Peaks are significant local maxima in a signal that can carry important information
/// about underlying patterns and phenomena.
///
/// This struct offers flexibility in peak detection by allowing you to specify various parameters such as minimum
/// and maximum peak heights, minimum prominence, minimum distance between peaks, and minimum plateau size.
/// Peaks can be detected in both floating-point and integer data vectors.
///
/// The peak detection is performed using the `find_peaks` crate, which provides powerful tools for accurately
/// identifying peaks within a signal.
///
/// Example Usage:
/// ```rust
/// let peak_finder = PeakFinder::new();
/// let raw_data = RawData::FloatVec(vec![0.1, 0.5, 0.2, 0.8, 0.4, 0.6, 0.3]);
/// let peaks = peak_finder.run_peakfinder(&raw_data);
/// println!("Detected Peaks: {:?}", peaks);
/// ```
/// 
/// 
/// #Issues
/// 
/// There is a known issue where this struct returns different values that the Python SciPy package for Int vectors.
/// In the crate that I am using for this struct, the crate returns peak structs which are a range of points where the peak is located,
/// throughout the tests for this struct I've been returning the middle position of this range so I believe this could be a reason for the discrepencies.
/// 
/// There is also another known issue where the struct returns zero values when the plateau size is larger than 1.

pub struct PeakFinder{}

impl PeakFinder{

    /// Creates a new instance of the `PeakFinder` struct, allowing peak detection operations to be performed.
    ///
    /// # Returns
    ///
    /// A new `PeakFinder` instance.
    /// 
    pub fn new() -> Self{
        PeakFinder{}
    }

    /// Finds peaks in the vector in the `RawData` struct without specifying height, prominence, distance, etc.
    ///
    /// # Parameters
    ///
    /// - `input`: A reference to the input data of type `RawData`, which can be either `FloatVec` or `IntVec`.
    ///
    /// # Returns
    ///
    /// A vector of detected peaks as `Vec<Peak<f32>>`.
    /// 
    pub fn run_peakfinder(&mut self, input: &RawData) -> Vec<Peak<f32>>{

        //matches RawData struct to get to input
        match input{

            RawData::FloatVec(input) => {

                //calls on Peakfinder to find peaks without any parameters
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).find_peaks();

                return peakvector
            }

            RawData::IntVec(input) => {

                //converts the Vec<i32> to Vec<f32>
                let input: Vec<f32> = input.iter().map(|&x| x as f32).collect();

                //calls on Peakfinder to find peaks without any parameters                
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).find_peaks();

                return peakvector

            }
        }

    }

    /// Finds peaks in the vector in the `RawData` struct with minimum height and minimum prominence parameters.
    ///
    /// # Parameters
    ///
    /// - `input`: A reference to the input data of type `RawData`, which can be either `FloatVec` or `IntVec`.
    /// - `min_height`: The minimum height for peak detection.
    /// - `min_prominence`: The minimum prominence for peak detection.
    ///
    /// # Returns
    ///
    /// A vector of detected peaks as `Vec<Peak<f32>>`.
    /// 
    pub fn run_peakfinder_min_hp(&mut self, input: &RawData, min_height: f32, min_prominence: f32) -> Vec<Peak<f32>>{

        //matches RawData struct to get to input
        match input{

            RawData::FloatVec(input) => {

                //calls on Peakfinder to find peaks with a certain minimum height and prominence
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_prominence(min_prominence).find_peaks();

                return peakvector
            }

            RawData::IntVec(input) => {

                //converts the Vec<i32> to Vec<f32>
                let input: Vec<f32> = input.iter().map(|&x| x as f32).collect();

                //calls on Peakfinder to find peaks with a certain minimum height and prominence
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_prominence(min_prominence).find_peaks();

                return peakvector

            }
        }

    }

    /// Finds peaks in the vector in the `RawData` struct with minimum and maximum height, prominence parameters.
    ///
    /// # Parameters
    ///
    /// - `input`: A reference to the input data of type `RawData`, which can be either `FloatVec` or `IntVec`.
    /// - `min_height`: The minimum height for peak detection.
    /// - `min_prominence`: The minimum prominence for peak detection.
    /// - `max_height`: The maximum height for peak detection.
    /// - `max_prominence`: The maximum prominence for peak detection.
    ///
    /// # Returns
    ///
    /// A vector of detected peaks as `Vec<Peak<f32>>`.
    /// 
    pub fn run_peakfinder_min_hp_max_hp(&mut self, input: &RawData, min_height: f32, min_prominence: f32, max_height: f32, max_prominence: f32) -> Vec<Peak<f32>>{
        
        //matches RawData struct to get to input
        match input{

            RawData::FloatVec(input) => {

                //calls on Peakfinder to find peaks with a certain minimum height and prominence, and max height and prominence
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_prominence(min_prominence).with_max_height(max_height).with_max_prominence(max_prominence).find_peaks();

                return peakvector
            }

            RawData::IntVec(input) => {

                //converts the Vec<i32> to Vec<f32>
                let input: Vec<f32> = input.iter().map(|&x| x as f32).collect();

                //calls on Peakfinder to find peaks with a certain minimum height and prominence, and max height and prominence
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_prominence(min_prominence).with_max_height(max_height).with_max_prominence(max_prominence).find_peaks();

                return peakvector

            }
        }

    }

    /// Finds peaks in the vector in the `RawData` struct with minimum height, distance, and plateau size parameters.
    ///
    /// # Parameters
    ///
    /// - `input`: A reference to the input data of type `RawData`, which can be either `FloatVec` or `IntVec`.
    /// - `min_height`: The minimum height for peak detection.
    /// - `min_distance`: The minimum distance between peaks.
    /// - `min_plateausize`: The minimum plateau size for peak detection.
    ///
    /// # Returns
    ///
    /// A vector of detected peaks as `Vec<Peak<f32>>`.
    /// 
    pub fn run_peakfinder_min_hdp(&mut self, input: &RawData, min_height: f32, min_distance: f32, min_plateausize: f32) -> Vec<Peak<f32>>{
       
        //matches RawData struct to get to input
        match input{

            RawData::FloatVec(input) => {

                //calls on Peakfinder to find peaks with a certain minimum height, distance, and plateau size
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_distance(min_distance as usize).with_min_plateau_size(min_plateausize as usize).find_peaks();

                return peakvector
            }

            RawData::IntVec(input) => {

                //converts the Vec<i32> to Vec<f32>
                let input: Vec<f32> = input.iter().map(|&x| x as f32).collect();
                
                //calls on Peakfinder to find peaks with a certain minimum height, distance, and plateau size
                let peakvector: Vec<Peak<f32>> = find_peaks::PeakFinder::new(&input).with_min_height(min_height).with_min_distance(min_distance as usize).with_min_plateau_size(min_plateausize as usize).find_peaks();

                return peakvector

            }
        }

    }
}



#[cfg(test)]
mod tests {

    use super::super::datatype::RawData;
    use super::PeakFinder;
    use find_peaks::{self, Peak};


    #[test]
    fn test_peakfinder(){

        //Creating RawData datatype, as peakfinders parameter is RawData
        let input_signal1: RawData= RawData::FloatVec(vec![-1.9683332331608474, -1.717858749355179, -3.759961365429422, -4.958623529379432, -5.485220603297286, -5.068780129646672, -4.96318014526072, -4.885967921675111, -5.829251675123736, -5.47186926387927, -4.047547235539912, -2.603374446559637, -3.946247752610877, -2.524435539984913, -1.797839878650658, -1.1220409621672651, 1.6720838919353374, 1.6955798780859315, 2.343381110638523, 3.218182666426548, 4.358122202583721, 4.765740984503017, 5.3746528409941625, 5.473490191594698, 5.4459250607079674, 4.222194023309575, 3.5631737543611535, 3.209953535535739, 2.2679968750567174, 1.689690757910821, -0.597044682792282, 1.2295096458344235, -0.5099352431494522, 0.47697194842395163, -2.3072239466746938, -3.042292567304973, -3.0447360037997395, -4.4776430466367305, -3.754204593262017, -6.087502919033549, -6.871119514379643, -4.411786302246042, -4.250411245136818, -4.024648954752383, -2.0401752910605495, -1.612949159415131, -2.3769865860842545, -3.15653998158343, -1.7163347916741254, 0.041943799144170235, 1.9018582516181133, 3.2137686101959435, 5.1216168049167985, 5.181272248816972, 4.177162647343236, 4.910559911650967, 5.430561901903032, 4.914839631100418, 4.082933712117779, 4.125764189831912, 3.7388394862747076, 3.7039793267104413, 3.4453653760211003, 1.1568404633907297, 1.1097420809409058, -0.8366844407434536, 0.00032929428028360963, -3.0127224874629523, -3.196935686912258, -4.808196244200207, -2.427739953054134, -5.288749141528557, -5.618464881445853, -3.662019379370501, -3.6482452220249724, -5.135757449930187, -4.660772381705265, -3.181033464835836, -2.183318478654945, -2.3096138598753755, -1.2072178300697296, 0.004073366967373482, 0.7634358906696369, 1.628489695396944, 1.9386947863288453, 2.8495583435889706, 5.59416091360117, 5.735551370915663, 3.5437303978327774, 4.885360913010343, 5.694246040053638, 5.902074521402208, 2.9898795350334995, 4.082546886152893, 4.420324680868482, 2.121238103640503, 1.5554249240012745, 1.0624173628602152, -0.3805941604330543, 0.00011955967508203713, -0.2726198877084691, -3.621165345065073, -2.3106682155706144, -3.008464055318883, -3.6791882243878735, -4.681285864712197, -3.6334225993506166, -4.216214656199944, -3.4899568532177225, -3.548036363731245, -2.886494585475302, -4.936660352815803, -2.590725789953134, -0.9882265278389202, -1.9279100219395602, -1.6026134543636394, 0.02413537999056925, 2.228901718042568, 1.322235456219919, 2.8494026435100954, 3.296661931119425, 6.027538285328892, 4.415979085282228, 5.1100437331543205, 6.295100814736361, 4.157654148903779, 3.8250625551763227, 3.210057612689865, 3.7263865243097665, 2.8724625295607904, 2.548551211873285, -0.7489415406426848, -0.22617745492874, -2.4690964140781864, -3.1401384827052907, -2.95160194936303, -3.968833387736624, -3.2246928010573304, -4.339702569114829, -4.609928246384497, -5.523486704135764, -4.33018351888759, -4.513375833855275, -5.613725875069774, -2.368110485069924, -4.174489468416508, -1.5462599231221796, -1.9112933863303545, -0.7448649061967919, -0.8100404653366764, 1.578768228660318, 3.0605698950709415, 4.481529255021599, 3.4321456403958956, 4.286162492840878, 3.542600865086815, 3.9863354311677752, 4.757085954129289, 4.696489704364847, 4.918603410598548, 3.5493191430519846, 3.666916622021471, 2.649908498384805, -0.7993657203092499, 1.7223957104697152, -1.5785502884870446, -1.5507321245573968, -2.3615494902364422, -1.9385720891906806, -3.30170673067445, -5.686723548491335, -5.69901727429125, -5.582951744522848, -6.659112241922954, -3.835897601355358, -5.404322318188626, -5.3489078376148065, -3.838447935719378, -3.6260649126217097, -3.2306088202096084, -1.0770129610851251, -0.25261828030183275, -1.2157559997094975, 1.9728883910883366, 2.069412523961515, 2.1302651705641797, 3.2818606629781093, 4.648235095453058, 4.345624826872002, 5.311056201049992, 5.753972583478267, 4.966966878966292, 5.687377769469735, 3.378594641228816, 3.724746520942307, 2.5068869273448637, 2.089416643652524, 2.2244325828483476, -1.5274374320264439, -1.5562495323100167, -0.6125119612628858, -2.423479614297431, -3.6936008895358454, -4.388813740752571, -2.854611911820127, -4.826404632800256, -4.572934893501845, -5.256601167670888, -4.099462848728823, -4.33604478745585, -4.816704386332135, -3.4583268405428713, -2.8384466420435683, -1.5125591619739749, -1.7625812266917775, 1.0157214852397545, 1.5095445502150102, 1.870631826947684, 2.0939755781446716, 1.5856545844653414, 2.58196547285172, 3.39753579431135, 5.264149506436597, 5.5893111966405895, 5.532014566927438, 4.3734134489260255, 6.189493491686161, 3.900783751807012, 3.5865611492307488, 0.6888304097686788, 0.10865269854412674, 0.9240575679009976, -0.7873680813469807, -2.7703355600198663, -1.9661351740983313, -3.508800442837363, -1.8306811210565046, -6.640595521684698, -4.777744190652245, -2.7724811787230283, -4.5073250427912415, -6.150295867603678, -3.5490954433689246, -4.787850673669156, -3.591325707404745, -1.0202459490603868, -2.330610271053504, -0.4834974609738696]);        
        let input_signal2: RawData= RawData::FloatVec(vec![57.42375095409937, 56.93672522014874, 62.608713592930876, 58.58999011614217, 53.781514473465975, 59.929765521680004, 62.83874316763905, 61.26564682933764, 60.298077069774514, 65.69037167656037, 64.4924856859658, 57.45776902834044, 67.2979270744406, 64.3065399558438, 69.10913177362237, 69.68135328937724, 66.27441648596799, 66.5712753857469, 68.7197206786976, 66.77069404089671, 69.47343229079385, 73.49687241835524, 74.39038713833476, 69.77134706156811, 71.11611036527033, 71.5514143700266, 70.92527568110486, 75.81690366006418, 71.48430850738842, 73.99189451125514, 77.46501916351879, 75.58651101737665, 78.48004995555802, 75.23963596784876, 80.30163806050568, 77.62973765421143, 80.16175629224077, 80.68837591441441, 79.6905673290241, 83.3649494980984, 83.41729893388869, 81.27997708388136, 82.92243382684352, 83.78103585804621, 83.22618159997842, 84.46526224102954, 84.07977328452601, 81.7653661597366, 83.24232423541409, 82.98821921592604, 84.52930477159329, 86.00457616832857, 84.85465642598282, 79.6146939926643, 83.91264690823981, 84.58107619775576, 86.86586732593057, 86.87782780765482, 86.49708394674948, 84.66183307481079, 83.32273574233504, 89.75815463910952, 81.73921292290746, 83.57667052875678, 82.29154311686115, 81.15090505024507, 81.0181809858243, 80.02406477550639, 79.95626138939767, 80.14968471195097, 77.93833929477205, 83.37140263453084, 80.63006474812504, 80.54886758093564, 74.61328386499513, 76.2067956336496, 75.93496294510105, 74.80986359211977, 79.09967283013746, 73.35452123905561, 76.43997860290371, 73.37084091593962, 72.27187673807346, 76.47512075935063, 73.51588873047531, 74.04609287428879, 73.5220350777692, 71.2657426722753, 69.51314201809633, 70.77160782734013, 68.74978122247276, 71.97834832913482, 68.52537097152933, 68.24617406288941, 69.73725303822009, 70.11807598587777, 69.35509863639831, 69.47650042355208, 66.64598319409271, 68.3345766746571, 66.2569569225079, 66.38695004387625, 58.302036498704005, 59.823489245315685, 63.90206250674178, 67.44946967703007, 64.55800828600442, 64.17137953752636, 64.24996006660133, 64.60722809289496, 62.715507684022455, 62.10266642672423, 62.987139113750466, 62.56118234068753, 60.74277369885567, 61.304485787724424, 63.39768612316597, 59.17504593185429, 60.92293919145394, 61.74329340412283, 57.66140451493842, 62.09807476069308, 61.33026367110421, 59.73879796926617, 58.5720628991695, 59.94647404967808, 62.000588448844795, 60.33024266169896, 60.98985504062868, 58.65602786741151, 59.89716687482642, 57.61316051537118, 57.166505274132426, 58.96556719641834, 60.37679949619507, 54.45584180986487, 58.7271982420652, 59.47366447708427, 56.07940328686498, 55.78066887807596, 54.54564631742577, 54.52126114421135, 56.12296587524522, 55.80474208024708, 55.450268698368774, 53.6860047610941, 56.265818477761954, 51.87808742443517, 54.7399559253531, 56.05143364518187, 52.41066187331751, 49.34598557487828, 50.79534970301276, 50.994619031875516, 54.5066732568543, 45.641877225921085, 45.44783149223058, 49.71813811826957, 49.06417606679746, 48.47113041190944, 45.066752680131536, 45.691797364781955, 46.04972969161036, 46.937126956810964, 48.579890629805696, 46.87831648338302, 43.2621571874902, 42.41539084532762, 47.732792000519055, 42.635078585330035, 45.25466510897015, 44.20457419707335, 39.80087116943825, 43.16784163357121, 42.72139421919673, 40.09690411968018, 39.072075680860785, 39.68721522523129, 39.69694747954145, 38.89958622251241, 36.20930810783846, 38.54348444090701, 39.49315655173681, 37.22306536922959, 38.45119902245094, 38.36169803033943, 36.27817076033729, 38.495487020334416, 36.08203266391632, 35.61234698124961, 37.31850254780822, 35.73508343583559, 34.24509993239897, 38.21302621383962, 35.21073369085666, 34.7557606412574, 38.30832823832005, 37.01263245066287, 38.27243482312153, 35.10563354463935, 36.54702691361821, 37.496545142093524, 40.21495219978659, 33.4472745629568, 36.19003918456128, 40.40279302834972, 39.782856300732334, 38.65349615550868, 39.553456446758894, 43.1239603503975, 38.65895285386617, 41.549607795356614, 41.87845934752343, 41.252783475633485, 41.294266760442, 42.2846785280957, 45.66429780888518, 48.37613972205177, 45.184550578912244, 45.83903707029868, 50.45023663869127, 47.807444589854164, 49.6770059662178, 47.06600589312027, 50.35579734602591, 45.08336916260292, 48.369671422972786, 50.56098595974319, 50.60044633370852, 54.91737419172761, 55.587993290196444, 51.32300551457022, 54.80025666186663, 51.74767705510797, 54.84209797727291, 56.02482448641735, 55.61823652859607, 58.55601631729386, 60.72812364016489, 58.75761743767916, 59.151794377943254, 59.22341098206529, 63.837931340247394, 61.3622177601643, 62.552959520063325, 62.90488582386602, 64.7298637786503, 64.29580055208083, 67.19411603468367]);        
        let input_signal3: RawData= RawData::FloatVec(vec![63.87407990913397, 71.15896719602357, 63.115700010760655, 68.11203109058866, 72.05391225842035, 68.595217178674, 71.07396068414282, 73.90735314927244, 75.4839035341285, 76.78060240194294, 76.41314974618543, 76.9376094238211, 73.69842701540244, 74.17574366773796, 73.0326380102839, 76.72091315093343, 74.76174245960347, 72.90024262451517, 75.27182285015432, 73.11459945191146, 74.32849498567064, 73.49171325726769, 74.51329368373803, 71.51598397989953, 72.38182769266501, 70.56496182932219, 77.18664716195467, 73.13384973861251, 74.36427463981589, 72.61944678630987, 69.50383084779672, 68.41666272735117, 68.00066197110492, 66.95272993698816, 63.22285603871563, 59.54581753245745, 58.868765486270654, 53.59671449821007, 48.50886672965195, 50.26323759552018, 47.055401894516734, 45.16706612246081, 45.024695073406875, 45.03481028625138, 38.213728709093175, 39.54035934310711, 39.660665138759576, 34.2576557239856, 36.822348038273645, 34.62235874386789, 33.36869171435286, 36.390260669335355, 39.22967990022403, 37.585326976253484, 37.2452463982599, 37.80656801392264, 43.80903376008632, 43.013690582871725, 47.78996496029131, 48.498807208314055, 51.413508759186605, 53.629077510159235, 53.48425583367129, 57.666261277173355, 61.636321342438755, 63.59039180025776, 66.45872852613083, 72.32233759795149, 68.99372381654175, 72.03742741326259, 70.58469703221148, 74.68098307844753, 71.39920458555368, 72.42570234770612, 76.18593220732501, 72.99025227337222, 75.99324901804084, 74.95132062904258, 77.6884852912195, 73.27758886599034, 74.0312742601366, 75.6241656923291, 77.33783424602399, 72.7177751858855, 73.66652963798643, 75.45114348891741, 76.17007522000577, 79.94234958288307, 77.3097065768666, 73.03350833349869, 77.46599186741783, 71.8527098841832, 74.99498078410292, 75.01107489300448, 71.6859735945485, 74.38607061603574, 69.37367831813016, 70.29771760531473, 64.91723638143351, 60.51049838366781]);        

        //Initiating Peak Finder filter
        let mut filter: PeakFinder = PeakFinder::new();

        //Running the run_peakfinder function in the Peak_Finder data struct
        let output1: Vec<Peak<f32>> = filter.run_peakfinder(&input_signal1);
        let output2: Vec<Peak<f32>> = filter.run_peakfinder(&input_signal2);
        let output3: Vec<Peak<f32>> = filter.run_peakfinder(&input_signal3);


        let mut output_vector1: Vec<usize> = Vec::new();
        let mut output_vector2: Vec<usize> = Vec::new();
        let mut output_vector3: Vec<usize> = Vec::new();


        //converting the output from Vec<Peak<f32>> form to Vec<usize> form
        let mut output_vector1: Vec<usize> = output1.iter().map(|element| element.middle_position()).collect();
        output_vector1.sort();

        let mut output_vector2: Vec<usize> = output2.iter().map(|element| element.middle_position()).collect();
        output_vector2.sort();

        let mut output_vector3: Vec<usize> = output3.iter().map(|element| element.middle_position()).collect();
        output_vector3.sort();


        let expected_output1: Vec<usize> = vec![ 1,   7,  11,  23,  31,  33,  38,  45,  53,  56,  59,  66,  70,  74,  78,  87 , 91 , 94,99, 102, 106, 108, 110, 113 ,117 ,121, 124, 128, 132, 135, 137, 141, 144, 146, 148, 152, 154, 157, 159, 161, 164, 166, 168, 172, 174, 181, 187, 190, 192, 194, 197, 200, 204, 206, 208, 213, 218, 223, 226, 231, 234, 236, 239, 242, 245];
        let expected_output2: Vec<usize> = vec![2, 6, 9, 12, 15, 18, 22, 25, 27, 30, 32, 34, 37, 40, 43, 45, 48, 51, 57, 61, 63, 69, 71, 75, 78, 80, 83, 85, 89, 91, 95, 97, 99, 101, 105, 109, 112, 116, 119, 121, 126, 128, 130, 134, 137, 142, 146, 149, 154, 157, 164, 168, 170, 173, 178, 182, 184, 187, 190, 193, 196, 198, 202, 205, 209, 212, 217, 220, 222, 224, 230, 232, 235, 238, 242, 246];
        let expected_output3: Vec<usize> = vec![ 1, 4, 9, 11, 13, 15, 18, 20, 22, 24, 26, 28, 39, 43, 46, 48, 52, 56, 61, 67, 69, 71, 74, 76, 78, 82, 87, 90, 93, 95, 97];

        assert_eq!(output_vector1, expected_output1); // test for signal 1
        assert_eq!(output_vector2, expected_output2); // test for signal 2
        assert_eq!(output_vector3, expected_output3); // test for signal 3

    }

    #[test]
    fn test_run_peakfinder_min_hp(){

            //Creating RawData datatype, as peakfinders parameter is RawData
            let input_signal1: RawData= RawData::FloatVec(vec![-1.9683332331608474, -1.717858749355179, -3.759961365429422, -4.958623529379432, -5.485220603297286, -5.068780129646672, -4.96318014526072, -4.885967921675111, -5.829251675123736, -5.47186926387927, -4.047547235539912, -2.603374446559637, -3.946247752610877, -2.524435539984913, -1.797839878650658, -1.1220409621672651, 1.6720838919353374, 1.6955798780859315, 2.343381110638523, 3.218182666426548, 4.358122202583721, 4.765740984503017, 5.3746528409941625, 5.473490191594698, 5.4459250607079674, 4.222194023309575, 3.5631737543611535, 3.209953535535739, 2.2679968750567174, 1.689690757910821, -0.597044682792282, 1.2295096458344235, -0.5099352431494522, 0.47697194842395163, -2.3072239466746938, -3.042292567304973, -3.0447360037997395, -4.4776430466367305, -3.754204593262017, -6.087502919033549, -6.871119514379643, -4.411786302246042, -4.250411245136818, -4.024648954752383, -2.0401752910605495, -1.612949159415131, -2.3769865860842545, -3.15653998158343, -1.7163347916741254, 0.041943799144170235, 1.9018582516181133, 3.2137686101959435, 5.1216168049167985, 5.181272248816972, 4.177162647343236, 4.910559911650967, 5.430561901903032, 4.914839631100418, 4.082933712117779, 4.125764189831912, 3.7388394862747076, 3.7039793267104413, 3.4453653760211003, 1.1568404633907297, 1.1097420809409058, -0.8366844407434536, 0.00032929428028360963, -3.0127224874629523, -3.196935686912258, -4.808196244200207, -2.427739953054134, -5.288749141528557, -5.618464881445853, -3.662019379370501, -3.6482452220249724, -5.135757449930187, -4.660772381705265, -3.181033464835836, -2.183318478654945, -2.3096138598753755, -1.2072178300697296, 0.004073366967373482, 0.7634358906696369, 1.628489695396944, 1.9386947863288453, 2.8495583435889706, 5.59416091360117, 5.735551370915663, 3.5437303978327774, 4.885360913010343, 5.694246040053638, 5.902074521402208, 2.9898795350334995, 4.082546886152893, 4.420324680868482, 2.121238103640503, 1.5554249240012745, 1.0624173628602152, -0.3805941604330543, 0.00011955967508203713, -0.2726198877084691, -3.621165345065073, -2.3106682155706144, -3.008464055318883, -3.6791882243878735, -4.681285864712197, -3.6334225993506166, -4.216214656199944, -3.4899568532177225, -3.548036363731245, -2.886494585475302, -4.936660352815803, -2.590725789953134, -0.9882265278389202, -1.9279100219395602, -1.6026134543636394, 0.02413537999056925, 2.228901718042568, 1.322235456219919, 2.8494026435100954, 3.296661931119425, 6.027538285328892, 4.415979085282228, 5.1100437331543205, 6.295100814736361, 4.157654148903779, 3.8250625551763227, 3.210057612689865, 3.7263865243097665, 2.8724625295607904, 2.548551211873285, -0.7489415406426848, -0.22617745492874, -2.4690964140781864, -3.1401384827052907, -2.95160194936303, -3.968833387736624, -3.2246928010573304, -4.339702569114829, -4.609928246384497, -5.523486704135764, -4.33018351888759, -4.513375833855275, -5.613725875069774, -2.368110485069924, -4.174489468416508, -1.5462599231221796, -1.9112933863303545, -0.7448649061967919, -0.8100404653366764, 1.578768228660318, 3.0605698950709415, 4.481529255021599, 3.4321456403958956, 4.286162492840878, 3.542600865086815, 3.9863354311677752, 4.757085954129289, 4.696489704364847, 4.918603410598548, 3.5493191430519846, 3.666916622021471, 2.649908498384805, -0.7993657203092499, 1.7223957104697152, -1.5785502884870446, -1.5507321245573968, -2.3615494902364422, -1.9385720891906806, -3.30170673067445, -5.686723548491335, -5.69901727429125, -5.582951744522848, -6.659112241922954, -3.835897601355358, -5.404322318188626, -5.3489078376148065, -3.838447935719378, -3.6260649126217097, -3.2306088202096084, -1.0770129610851251, -0.25261828030183275, -1.2157559997094975, 1.9728883910883366, 2.069412523961515, 2.1302651705641797, 3.2818606629781093, 4.648235095453058, 4.345624826872002, 5.311056201049992, 5.753972583478267, 4.966966878966292, 5.687377769469735, 3.378594641228816, 3.724746520942307, 2.5068869273448637, 2.089416643652524, 2.2244325828483476, -1.5274374320264439, -1.5562495323100167, -0.6125119612628858, -2.423479614297431, -3.6936008895358454, -4.388813740752571, -2.854611911820127, -4.826404632800256, -4.572934893501845, -5.256601167670888, -4.099462848728823, -4.33604478745585, -4.816704386332135, -3.4583268405428713, -2.8384466420435683, -1.5125591619739749, -1.7625812266917775, 1.0157214852397545, 1.5095445502150102, 1.870631826947684, 2.0939755781446716, 1.5856545844653414, 2.58196547285172, 3.39753579431135, 5.264149506436597, 5.5893111966405895, 5.532014566927438, 4.3734134489260255, 6.189493491686161, 3.900783751807012, 3.5865611492307488, 0.6888304097686788, 0.10865269854412674, 0.9240575679009976, -0.7873680813469807, -2.7703355600198663, -1.9661351740983313, -3.508800442837363, -1.8306811210565046, -6.640595521684698, -4.777744190652245, -2.7724811787230283, -4.5073250427912415, -6.150295867603678, -3.5490954433689246, -4.787850673669156, -3.591325707404745, -1.0202459490603868, -2.330610271053504, -0.4834974609738696]);        
            let input_signal2: RawData= RawData::FloatVec(vec![57.42375095409937, 56.93672522014874, 62.608713592930876, 58.58999011614217, 53.781514473465975, 59.929765521680004, 62.83874316763905, 61.26564682933764, 60.298077069774514, 65.69037167656037, 64.4924856859658, 57.45776902834044, 67.2979270744406, 64.3065399558438, 69.10913177362237, 69.68135328937724, 66.27441648596799, 66.5712753857469, 68.7197206786976, 66.77069404089671, 69.47343229079385, 73.49687241835524, 74.39038713833476, 69.77134706156811, 71.11611036527033, 71.5514143700266, 70.92527568110486, 75.81690366006418, 71.48430850738842, 73.99189451125514, 77.46501916351879, 75.58651101737665, 78.48004995555802, 75.23963596784876, 80.30163806050568, 77.62973765421143, 80.16175629224077, 80.68837591441441, 79.6905673290241, 83.3649494980984, 83.41729893388869, 81.27997708388136, 82.92243382684352, 83.78103585804621, 83.22618159997842, 84.46526224102954, 84.07977328452601, 81.7653661597366, 83.24232423541409, 82.98821921592604, 84.52930477159329, 86.00457616832857, 84.85465642598282, 79.6146939926643, 83.91264690823981, 84.58107619775576, 86.86586732593057, 86.87782780765482, 86.49708394674948, 84.66183307481079, 83.32273574233504, 89.75815463910952, 81.73921292290746, 83.57667052875678, 82.29154311686115, 81.15090505024507, 81.0181809858243, 80.02406477550639, 79.95626138939767, 80.14968471195097, 77.93833929477205, 83.37140263453084, 80.63006474812504, 80.54886758093564, 74.61328386499513, 76.2067956336496, 75.93496294510105, 74.80986359211977, 79.09967283013746, 73.35452123905561, 76.43997860290371, 73.37084091593962, 72.27187673807346, 76.47512075935063, 73.51588873047531, 74.04609287428879, 73.5220350777692, 71.2657426722753, 69.51314201809633, 70.77160782734013, 68.74978122247276, 71.97834832913482, 68.52537097152933, 68.24617406288941, 69.73725303822009, 70.11807598587777, 69.35509863639831, 69.47650042355208, 66.64598319409271, 68.3345766746571, 66.2569569225079, 66.38695004387625, 58.302036498704005, 59.823489245315685, 63.90206250674178, 67.44946967703007, 64.55800828600442, 64.17137953752636, 64.24996006660133, 64.60722809289496, 62.715507684022455, 62.10266642672423, 62.987139113750466, 62.56118234068753, 60.74277369885567, 61.304485787724424, 63.39768612316597, 59.17504593185429, 60.92293919145394, 61.74329340412283, 57.66140451493842, 62.09807476069308, 61.33026367110421, 59.73879796926617, 58.5720628991695, 59.94647404967808, 62.000588448844795, 60.33024266169896, 60.98985504062868, 58.65602786741151, 59.89716687482642, 57.61316051537118, 57.166505274132426, 58.96556719641834, 60.37679949619507, 54.45584180986487, 58.7271982420652, 59.47366447708427, 56.07940328686498, 55.78066887807596, 54.54564631742577, 54.52126114421135, 56.12296587524522, 55.80474208024708, 55.450268698368774, 53.6860047610941, 56.265818477761954, 51.87808742443517, 54.7399559253531, 56.05143364518187, 52.41066187331751, 49.34598557487828, 50.79534970301276, 50.994619031875516, 54.5066732568543, 45.641877225921085, 45.44783149223058, 49.71813811826957, 49.06417606679746, 48.47113041190944, 45.066752680131536, 45.691797364781955, 46.04972969161036, 46.937126956810964, 48.579890629805696, 46.87831648338302, 43.2621571874902, 42.41539084532762, 47.732792000519055, 42.635078585330035, 45.25466510897015, 44.20457419707335, 39.80087116943825, 43.16784163357121, 42.72139421919673, 40.09690411968018, 39.072075680860785, 39.68721522523129, 39.69694747954145, 38.89958622251241, 36.20930810783846, 38.54348444090701, 39.49315655173681, 37.22306536922959, 38.45119902245094, 38.36169803033943, 36.27817076033729, 38.495487020334416, 36.08203266391632, 35.61234698124961, 37.31850254780822, 35.73508343583559, 34.24509993239897, 38.21302621383962, 35.21073369085666, 34.7557606412574, 38.30832823832005, 37.01263245066287, 38.27243482312153, 35.10563354463935, 36.54702691361821, 37.496545142093524, 40.21495219978659, 33.4472745629568, 36.19003918456128, 40.40279302834972, 39.782856300732334, 38.65349615550868, 39.553456446758894, 43.1239603503975, 38.65895285386617, 41.549607795356614, 41.87845934752343, 41.252783475633485, 41.294266760442, 42.2846785280957, 45.66429780888518, 48.37613972205177, 45.184550578912244, 45.83903707029868, 50.45023663869127, 47.807444589854164, 49.6770059662178, 47.06600589312027, 50.35579734602591, 45.08336916260292, 48.369671422972786, 50.56098595974319, 50.60044633370852, 54.91737419172761, 55.587993290196444, 51.32300551457022, 54.80025666186663, 51.74767705510797, 54.84209797727291, 56.02482448641735, 55.61823652859607, 58.55601631729386, 60.72812364016489, 58.75761743767916, 59.151794377943254, 59.22341098206529, 63.837931340247394, 61.3622177601643, 62.552959520063325, 62.90488582386602, 64.7298637786503, 64.29580055208083, 67.19411603468367]);        
            let input_signal3: RawData= RawData::FloatVec(vec![63.87407990913397, 71.15896719602357, 63.115700010760655, 68.11203109058866, 72.05391225842035, 68.595217178674, 71.07396068414282, 73.90735314927244, 75.4839035341285, 76.78060240194294, 76.41314974618543, 76.9376094238211, 73.69842701540244, 74.17574366773796, 73.0326380102839, 76.72091315093343, 74.76174245960347, 72.90024262451517, 75.27182285015432, 73.11459945191146, 74.32849498567064, 73.49171325726769, 74.51329368373803, 71.51598397989953, 72.38182769266501, 70.56496182932219, 77.18664716195467, 73.13384973861251, 74.36427463981589, 72.61944678630987, 69.50383084779672, 68.41666272735117, 68.00066197110492, 66.95272993698816, 63.22285603871563, 59.54581753245745, 58.868765486270654, 53.59671449821007, 48.50886672965195, 50.26323759552018, 47.055401894516734, 45.16706612246081, 45.024695073406875, 45.03481028625138, 38.213728709093175, 39.54035934310711, 39.660665138759576, 34.2576557239856, 36.822348038273645, 34.62235874386789, 33.36869171435286, 36.390260669335355, 39.22967990022403, 37.585326976253484, 37.2452463982599, 37.80656801392264, 43.80903376008632, 43.013690582871725, 47.78996496029131, 48.498807208314055, 51.413508759186605, 53.629077510159235, 53.48425583367129, 57.666261277173355, 61.636321342438755, 63.59039180025776, 66.45872852613083, 72.32233759795149, 68.99372381654175, 72.03742741326259, 70.58469703221148, 74.68098307844753, 71.39920458555368, 72.42570234770612, 76.18593220732501, 72.99025227337222, 75.99324901804084, 74.95132062904258, 77.6884852912195, 73.27758886599034, 74.0312742601366, 75.6241656923291, 77.33783424602399, 72.7177751858855, 73.66652963798643, 75.45114348891741, 76.17007522000577, 79.94234958288307, 77.3097065768666, 73.03350833349869, 77.46599186741783, 71.8527098841832, 74.99498078410292, 75.01107489300448, 71.6859735945485, 74.38607061603574, 69.37367831813016, 70.29771760531473, 64.91723638143351, 60.51049838366781]);        

            let minimum_height: f32 = 2.0;
            let minimum_prominence: f32 = 2.0;

            //Initiating Peak Finder filter
            let mut filter: PeakFinder = PeakFinder::new();
        
            //Running the run_peakfinder function in the Peak_Finder data struct
            let output1: Vec<Peak<f32>> = filter.run_peakfinder_min_hp(&input_signal1,minimum_height, minimum_prominence);
            let output2: Vec<Peak<f32>> = filter.run_peakfinder_min_hp(&input_signal2,minimum_height, minimum_prominence);
            let output3: Vec<Peak<f32>> = filter.run_peakfinder_min_hp(&input_signal3,minimum_height, minimum_prominence);
        
        
            let mut output_vector1: Vec<usize> = Vec::new();
            let mut output_vector2: Vec<usize> = Vec::new();
            let mut output_vector3: Vec<usize> = Vec::new();
        
        
            //converting the output from Vec<Peak<f32>> form to Vec<usize> form
            let mut output_vector1: Vec<usize> = output1.iter().map(|element| element.middle_position()).collect();
            output_vector1.sort();
        
            let mut output_vector2: Vec<usize> = output2.iter().map(|element| element.middle_position()).collect();
            output_vector2.sort();
        
            let mut output_vector3: Vec<usize> = output3.iter().map(|element| element.middle_position()).collect();
            output_vector3.sort();
        
            let expected_output1: Vec<usize> = vec![ 23,  56,  87,  91, 124, 159, 190, 226];
            let expected_output2: Vec<usize> = vec![2, 6, 9, 12, 15, 22, 27, 32, 34, 40, 45, 51, 57, 61, 71, 78, 80, 83, 91, 105, 116, 119, 121, 126, 134, 137, 146, 149, 154, 157, 164, 168, 170, 173, 182, 187, 193, 196, 202, 209, 217, 220, 224, 230, 232, 242];
            let expected_output3: Vec<usize> = vec![ 1,  4, 11, 15, 18, 26, 48, 67, 71, 74, 78, 82, 87, 90, 93, 95];

            assert_eq!(output_vector1, expected_output1); // test for signal 1
            assert_eq!(output_vector2, expected_output2); // test for signal 2
            assert_eq!(output_vector3, expected_output3); // test for signal 3

    }

    #[test]
    fn test_run_peakfinder_min_hdp(){

        //show this to sadra because plateau size is bugging
        //when i put a plateau size of 2 in python it spits out the same thing as putting a plateau size of 1
        //when i put a pleateau size of 2 in rust it spits out nothing, but when i put a pleatuea size of 1 its same as python??? so confused
            //so the way the peak struct works in rust is that it contains a range of points where the peak is, and i've just been taking the middle position so this could be the cause of the discrepencies
            //Creating RawData datatype, as peakfinders parameter is RawData
            let input_signal1: RawData= RawData::FloatVec(vec![-1.9683332331608474, -1.717858749355179, -3.759961365429422, -4.958623529379432, -5.485220603297286, -5.068780129646672, -4.96318014526072, -4.885967921675111, -5.829251675123736, -5.47186926387927, -4.047547235539912, -2.603374446559637, -3.946247752610877, -2.524435539984913, -1.797839878650658, -1.1220409621672651, 1.6720838919353374, 1.6955798780859315, 2.343381110638523, 3.218182666426548, 4.358122202583721, 4.765740984503017, 5.3746528409941625, 5.473490191594698, 5.4459250607079674, 4.222194023309575, 3.5631737543611535, 3.209953535535739, 2.2679968750567174, 1.689690757910821, -0.597044682792282, 1.2295096458344235, -0.5099352431494522, 0.47697194842395163, -2.3072239466746938, -3.042292567304973, -3.0447360037997395, -4.4776430466367305, -3.754204593262017, -6.087502919033549, -6.871119514379643, -4.411786302246042, -4.250411245136818, -4.024648954752383, -2.0401752910605495, -1.612949159415131, -2.3769865860842545, -3.15653998158343, -1.7163347916741254, 0.041943799144170235, 1.9018582516181133, 3.2137686101959435, 5.1216168049167985, 5.181272248816972, 4.177162647343236, 4.910559911650967, 5.430561901903032, 4.914839631100418, 4.082933712117779, 4.125764189831912, 3.7388394862747076, 3.7039793267104413, 3.4453653760211003, 1.1568404633907297, 1.1097420809409058, -0.8366844407434536, 0.00032929428028360963, -3.0127224874629523, -3.196935686912258, -4.808196244200207, -2.427739953054134, -5.288749141528557, -5.618464881445853, -3.662019379370501, -3.6482452220249724, -5.135757449930187, -4.660772381705265, -3.181033464835836, -2.183318478654945, -2.3096138598753755, -1.2072178300697296, 0.004073366967373482, 0.7634358906696369, 1.628489695396944, 1.9386947863288453, 2.8495583435889706, 5.59416091360117, 5.735551370915663, 3.5437303978327774, 4.885360913010343, 5.694246040053638, 5.902074521402208, 2.9898795350334995, 4.082546886152893, 4.420324680868482, 2.121238103640503, 1.5554249240012745, 1.0624173628602152, -0.3805941604330543, 0.00011955967508203713, -0.2726198877084691, -3.621165345065073, -2.3106682155706144, -3.008464055318883, -3.6791882243878735, -4.681285864712197, -3.6334225993506166, -4.216214656199944, -3.4899568532177225, -3.548036363731245, -2.886494585475302, -4.936660352815803, -2.590725789953134, -0.9882265278389202, -1.9279100219395602, -1.6026134543636394, 0.02413537999056925, 2.228901718042568, 1.322235456219919, 2.8494026435100954, 3.296661931119425, 6.027538285328892, 4.415979085282228, 5.1100437331543205, 6.295100814736361, 4.157654148903779, 3.8250625551763227, 3.210057612689865, 3.7263865243097665, 2.8724625295607904, 2.548551211873285, -0.7489415406426848, -0.22617745492874, -2.4690964140781864, -3.1401384827052907, -2.95160194936303, -3.968833387736624, -3.2246928010573304, -4.339702569114829, -4.609928246384497, -5.523486704135764, -4.33018351888759, -4.513375833855275, -5.613725875069774, -2.368110485069924, -4.174489468416508, -1.5462599231221796, -1.9112933863303545, -0.7448649061967919, -0.8100404653366764, 1.578768228660318, 3.0605698950709415, 4.481529255021599, 3.4321456403958956, 4.286162492840878, 3.542600865086815, 3.9863354311677752, 4.757085954129289, 4.696489704364847, 4.918603410598548, 3.5493191430519846, 3.666916622021471, 2.649908498384805, -0.7993657203092499, 1.7223957104697152, -1.5785502884870446, -1.5507321245573968, -2.3615494902364422, -1.9385720891906806, -3.30170673067445, -5.686723548491335, -5.69901727429125, -5.582951744522848, -6.659112241922954, -3.835897601355358, -5.404322318188626, -5.3489078376148065, -3.838447935719378, -3.6260649126217097, -3.2306088202096084, -1.0770129610851251, -0.25261828030183275, -1.2157559997094975, 1.9728883910883366, 2.069412523961515, 2.1302651705641797, 3.2818606629781093, 4.648235095453058, 4.345624826872002, 5.311056201049992, 5.753972583478267, 4.966966878966292, 5.687377769469735, 3.378594641228816, 3.724746520942307, 2.5068869273448637, 2.089416643652524, 2.2244325828483476, -1.5274374320264439, -1.5562495323100167, -0.6125119612628858, -2.423479614297431, -3.6936008895358454, -4.388813740752571, -2.854611911820127, -4.826404632800256, -4.572934893501845, -5.256601167670888, -4.099462848728823, -4.33604478745585, -4.816704386332135, -3.4583268405428713, -2.8384466420435683, -1.5125591619739749, -1.7625812266917775, 1.0157214852397545, 1.5095445502150102, 1.870631826947684, 2.0939755781446716, 1.5856545844653414, 2.58196547285172, 3.39753579431135, 5.264149506436597, 5.5893111966405895, 5.532014566927438, 4.3734134489260255, 6.189493491686161, 3.900783751807012, 3.5865611492307488, 0.6888304097686788, 0.10865269854412674, 0.9240575679009976, -0.7873680813469807, -2.7703355600198663, -1.9661351740983313, -3.508800442837363, -1.8306811210565046, -6.640595521684698, -4.777744190652245, -2.7724811787230283, -4.5073250427912415, -6.150295867603678, -3.5490954433689246, -4.787850673669156, -3.591325707404745, -1.0202459490603868, -2.330610271053504, -0.4834974609738696]);        
            let input_signal2: RawData= RawData::FloatVec(vec![57.42375095409937, 56.93672522014874, 62.608713592930876, 58.58999011614217, 53.781514473465975, 59.929765521680004, 62.83874316763905, 61.26564682933764, 60.298077069774514, 65.69037167656037, 64.4924856859658, 57.45776902834044, 67.2979270744406, 64.3065399558438, 69.10913177362237, 69.68135328937724, 66.27441648596799, 66.5712753857469, 68.7197206786976, 66.77069404089671, 69.47343229079385, 73.49687241835524, 74.39038713833476, 69.77134706156811, 71.11611036527033, 71.5514143700266, 70.92527568110486, 75.81690366006418, 71.48430850738842, 73.99189451125514, 77.46501916351879, 75.58651101737665, 78.48004995555802, 75.23963596784876, 80.30163806050568, 77.62973765421143, 80.16175629224077, 80.68837591441441, 79.6905673290241, 83.3649494980984, 83.41729893388869, 81.27997708388136, 82.92243382684352, 83.78103585804621, 83.22618159997842, 84.46526224102954, 84.07977328452601, 81.7653661597366, 83.24232423541409, 82.98821921592604, 84.52930477159329, 86.00457616832857, 84.85465642598282, 79.6146939926643, 83.91264690823981, 84.58107619775576, 86.86586732593057, 86.87782780765482, 86.49708394674948, 84.66183307481079, 83.32273574233504, 89.75815463910952, 81.73921292290746, 83.57667052875678, 82.29154311686115, 81.15090505024507, 81.0181809858243, 80.02406477550639, 79.95626138939767, 80.14968471195097, 77.93833929477205, 83.37140263453084, 80.63006474812504, 80.54886758093564, 74.61328386499513, 76.2067956336496, 75.93496294510105, 74.80986359211977, 79.09967283013746, 73.35452123905561, 76.43997860290371, 73.37084091593962, 72.27187673807346, 76.47512075935063, 73.51588873047531, 74.04609287428879, 73.5220350777692, 71.2657426722753, 69.51314201809633, 70.77160782734013, 68.74978122247276, 71.97834832913482, 68.52537097152933, 68.24617406288941, 69.73725303822009, 70.11807598587777, 69.35509863639831, 69.47650042355208, 66.64598319409271, 68.3345766746571, 66.2569569225079, 66.38695004387625, 58.302036498704005, 59.823489245315685, 63.90206250674178, 67.44946967703007, 64.55800828600442, 64.17137953752636, 64.24996006660133, 64.60722809289496, 62.715507684022455, 62.10266642672423, 62.987139113750466, 62.56118234068753, 60.74277369885567, 61.304485787724424, 63.39768612316597, 59.17504593185429, 60.92293919145394, 61.74329340412283, 57.66140451493842, 62.09807476069308, 61.33026367110421, 59.73879796926617, 58.5720628991695, 59.94647404967808, 62.000588448844795, 60.33024266169896, 60.98985504062868, 58.65602786741151, 59.89716687482642, 57.61316051537118, 57.166505274132426, 58.96556719641834, 60.37679949619507, 54.45584180986487, 58.7271982420652, 59.47366447708427, 56.07940328686498, 55.78066887807596, 54.54564631742577, 54.52126114421135, 56.12296587524522, 55.80474208024708, 55.450268698368774, 53.6860047610941, 56.265818477761954, 51.87808742443517, 54.7399559253531, 56.05143364518187, 52.41066187331751, 49.34598557487828, 50.79534970301276, 50.994619031875516, 54.5066732568543, 45.641877225921085, 45.44783149223058, 49.71813811826957, 49.06417606679746, 48.47113041190944, 45.066752680131536, 45.691797364781955, 46.04972969161036, 46.937126956810964, 48.579890629805696, 46.87831648338302, 43.2621571874902, 42.41539084532762, 47.732792000519055, 42.635078585330035, 45.25466510897015, 44.20457419707335, 39.80087116943825, 43.16784163357121, 42.72139421919673, 40.09690411968018, 39.072075680860785, 39.68721522523129, 39.69694747954145, 38.89958622251241, 36.20930810783846, 38.54348444090701, 39.49315655173681, 37.22306536922959, 38.45119902245094, 38.36169803033943, 36.27817076033729, 38.495487020334416, 36.08203266391632, 35.61234698124961, 37.31850254780822, 35.73508343583559, 34.24509993239897, 38.21302621383962, 35.21073369085666, 34.7557606412574, 38.30832823832005, 37.01263245066287, 38.27243482312153, 35.10563354463935, 36.54702691361821, 37.496545142093524, 40.21495219978659, 33.4472745629568, 36.19003918456128, 40.40279302834972, 39.782856300732334, 38.65349615550868, 39.553456446758894, 43.1239603503975, 38.65895285386617, 41.549607795356614, 41.87845934752343, 41.252783475633485, 41.294266760442, 42.2846785280957, 45.66429780888518, 48.37613972205177, 45.184550578912244, 45.83903707029868, 50.45023663869127, 47.807444589854164, 49.6770059662178, 47.06600589312027, 50.35579734602591, 45.08336916260292, 48.369671422972786, 50.56098595974319, 50.60044633370852, 54.91737419172761, 55.587993290196444, 51.32300551457022, 54.80025666186663, 51.74767705510797, 54.84209797727291, 56.02482448641735, 55.61823652859607, 58.55601631729386, 60.72812364016489, 58.75761743767916, 59.151794377943254, 59.22341098206529, 63.837931340247394, 61.3622177601643, 62.552959520063325, 62.90488582386602, 64.7298637786503, 64.29580055208083, 67.19411603468367]);        
            let input_signal3: RawData= RawData::FloatVec(vec![63.87407990913397, 71.15896719602357, 63.115700010760655, 68.11203109058866, 72.05391225842035, 68.595217178674, 71.07396068414282, 73.90735314927244, 75.4839035341285, 76.78060240194294, 76.41314974618543, 76.9376094238211, 73.69842701540244, 74.17574366773796, 73.0326380102839, 76.72091315093343, 74.76174245960347, 72.90024262451517, 75.27182285015432, 73.11459945191146, 74.32849498567064, 73.49171325726769, 74.51329368373803, 71.51598397989953, 72.38182769266501, 70.56496182932219, 77.18664716195467, 73.13384973861251, 74.36427463981589, 72.61944678630987, 69.50383084779672, 68.41666272735117, 68.00066197110492, 66.95272993698816, 63.22285603871563, 59.54581753245745, 58.868765486270654, 53.59671449821007, 48.50886672965195, 50.26323759552018, 47.055401894516734, 45.16706612246081, 45.024695073406875, 45.03481028625138, 38.213728709093175, 39.54035934310711, 39.660665138759576, 34.2576557239856, 36.822348038273645, 34.62235874386789, 33.36869171435286, 36.390260669335355, 39.22967990022403, 37.585326976253484, 37.2452463982599, 37.80656801392264, 43.80903376008632, 43.013690582871725, 47.78996496029131, 48.498807208314055, 51.413508759186605, 53.629077510159235, 53.48425583367129, 57.666261277173355, 61.636321342438755, 63.59039180025776, 66.45872852613083, 72.32233759795149, 68.99372381654175, 72.03742741326259, 70.58469703221148, 74.68098307844753, 71.39920458555368, 72.42570234770612, 76.18593220732501, 72.99025227337222, 75.99324901804084, 74.95132062904258, 77.6884852912195, 73.27758886599034, 74.0312742601366, 75.6241656923291, 77.33783424602399, 72.7177751858855, 73.66652963798643, 75.45114348891741, 76.17007522000577, 79.94234958288307, 77.3097065768666, 73.03350833349869, 77.46599186741783, 71.8527098841832, 74.99498078410292, 75.01107489300448, 71.6859735945485, 74.38607061603574, 69.37367831813016, 70.29771760531473, 64.91723638143351, 60.51049838366781]);        

            //Creating RawData datatype, because peakfinders parameter is RawData
            let input_signal1int: RawData= RawData::IntVec(vec![-2, -2, -4, -5, -5, -5, -5, -5, -6, -5, -4, -3, -4, -3, -2, -1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 4, 4, 3, 2, 2, -1, 1, -1, 0, -2, -3, -3, -4, -4, -6, -7, -4, -4, -4, -2, -2, -2, -3, -2, 0, 2, 3, 5, 5, 4, 5, 5, 5, 4, 4, 4, 4, 3, 1, 1, -1, 0, -3, -3, -5, -2, -5, -6, -4, -4, -5, -5, -3, -2, -2, -1, 0, 1, 2, 2, 3, 6, 6, 4, 5, 6, 6, 3, 4, 4, 2, 2, 1, 0, 0, 0, -4, -2, -3, -4, -5, -4, -4, -3, -4, -3, -5, -3, -1, -2, -2, 0, 2, 1, 3, 3, 6, 4, 5, 6, 4, 4, 3, 4, 3, 3, -1, 0, -2, -3, -3, -4, -3, -4, -5, -6, -4, -5, -6, -2, -4, -2, -2, -1, -1, 2, 3, 4, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3, -1, 2, -2, -2, -2, -2, -3, -6, -6, -6, -7, -4, -5, -5, -4, -4, -3, -1, 0, -1, 2, 2, 2, 3, 5, 4, 5, 6, 5, 6, 3, 4, 3, 2, 2, -2, -2, -1, -2, -4, -4, -3, -5, -5, -5, -4, -4, -5, -3, -3, -2, -2, 1, 2, 2, 2, 2, 3, 3, 5, 6, 6, 4, 6, 4, 4, 1, 0, 1, -1, -3, -2, -4, -2, -7, -5, -3, -5, -6, -4, -5, -4, -1, -2, 0]);        
            let input_signal2int: RawData= RawData::IntVec(vec![57, 63, 59, 54, 60, 63, 61, 60, 66, 64, 57, 67, 64, 69, 70, 66, 67, 69, 67, 69, 73, 74, 70, 71, 72, 71, 76, 71, 74, 77, 76, 78, 75, 80, 78, 80, 81, 80, 83, 83, 81, 83, 84, 83, 84, 84, 82, 83, 83, 85, 86, 85, 80, 84, 85, 87, 87, 86, 85, 83, 90, 82, 84, 82, 81, 81, 80, 80, 80, 78, 83, 81, 81, 75, 76, 76, 75, 79, 73, 76, 73, 72, 76, 74, 74, 74, 71, 70, 71, 69, 72, 69, 68, 70, 70, 69, 69, 67, 68, 66, 66, 58, 60, 64, 67, 65, 64, 64, 65, 63, 62, 63, 63, 61, 61, 63, 59, 61, 62, 58, 62, 61, 60, 59, 60, 62, 60, 61, 59, 60, 58, 57, 59, 60, 54, 59, 59, 56, 56, 55, 55, 56, 56, 55, 54, 56, 52, 55, 56, 52, 49, 51, 51, 55, 46, 45, 50, 49, 48, 45, 46, 46, 47, 49, 47, 43, 42, 48, 43, 45, 44, 40, 43, 43, 40, 39, 40, 40, 39, 36, 39, 39, 37, 38, 38, 36, 38, 36, 36, 37, 36, 34, 38, 35, 35, 38, 37, 38, 35, 37, 37, 40, 33, 36, 40, 40, 39, 40, 43, 39, 42, 42, 41, 41, 42, 46, 48, 45, 46, 50, 48, 50, 47, 50, 45, 48, 51, 51, 55, 56, 51, 55, 52, 55, 56, 56, 59, 61, 59, 59, 59, 64, 61, 63, 63, 65, 64, 67]);        
            let input_signal3int: RawData= RawData::IntVec(vec![64, 71, 63, 68, 72, 69, 71, 74, 75, 77, 76, 77, 74, 74, 73, 77, 75, 73, 75, 73, 74, 73, 75, 72, 72, 71, 77, 73, 74, 73, 70, 68, 68, 67, 63, 60, 59, 54, 49, 50, 47, 45, 45, 45, 38, 40, 40, 34, 37, 35, 33, 36, 39, 38, 37, 38, 44, 43, 48, 48, 51, 54, 53, 58, 62, 64, 66, 72, 69, 72, 71, 75, 71, 72, 76, 73, 76, 75, 78, 73, 74, 76, 77, 73, 74, 75, 76, 80, 77, 73, 77, 72, 75, 75, 72, 74, 69, 70, 65, 61]);   
 
            let minimum_height: f32 = 2.0;
            let minimum_distance: f32 = 4.0;
            let minimum_plateau_size = 1.0;

            //Initiating Peak Finder filter
            let mut filter: PeakFinder = PeakFinder::new();
        
            //Running the run_peakfinder function in the Peak_Finder data struct
            let output1: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal1,minimum_height, minimum_distance, minimum_plateau_size);
            let output2: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal2,minimum_height, minimum_distance, minimum_plateau_size);
            let output3: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal3,minimum_height, minimum_distance, minimum_plateau_size);

            //Running the run_peakfinder function in the Peak_Finder data struct
            let output1int: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal1int,minimum_height, minimum_distance, minimum_plateau_size);
            let output2int: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal2int,minimum_height, minimum_distance, minimum_plateau_size);
            let output3int: Vec<Peak<f32>> = filter.run_peakfinder_min_hdp(&input_signal3int,minimum_height, minimum_distance, minimum_plateau_size);
          

            let mut output_vector1: Vec<usize> = Vec::new();
            let mut output_vector2: Vec<usize> = Vec::new();
            let mut output_vector3: Vec<usize> = Vec::new();

            let mut output_vector1int: Vec<usize> = Vec::new();
            let mut output_vector2int: Vec<usize> = Vec::new();
            let mut output_vector3int: Vec<usize> = Vec::new();

        
        
            //converting the output from Vec<Peak<f32>> form to Vec<usize> form
            let mut output_vector1: Vec<usize> = output1.iter().map(|element| element.middle_position()).collect();
            output_vector1.sort();
        
            let mut output_vector2: Vec<usize> = output2.iter().map(|element| element.middle_position()).collect();
            output_vector2.sort();
        
            let mut output_vector3: Vec<usize> = output3.iter().map(|element| element.middle_position()).collect();
            output_vector3.sort();

            let mut output_vector1int: Vec<usize> = output1int.iter().map(|element| element.middle_position()).collect();
            output_vector1int.sort();
        
            let mut output_vector2int: Vec<usize> = output2int.iter().map(|element| element.middle_position()).collect();
            output_vector2int.sort();
        
            let mut output_vector3int: Vec<usize> = output3int.iter().map(|element| element.middle_position()).collect();
            output_vector3int.sort();

        
            let expected_output1: Vec<usize> = vec![ 23,  56,  87,  91, 117, 124, 128, 152, 159, 190, 194, 218, 226];
            let expected_output2: Vec<usize> = vec![2, 9, 15, 22, 30, 34, 40, 45, 51, 57, 61, 71, 78, 83, 91, 95, 99, 105, 109, 116, 121, 126, 130, 134, 142, 146, 154, 164, 168, 173, 178, 182, 187, 196, 205, 209, 220, 224, 230, 238, 242, 246];
            let expected_output3: Vec<usize> = vec![ 4, 11, 15, 22, 26, 39, 43, 48, 52 ,56 ,61 ,67 ,74 ,78 ,82, 87, 93, 97];
            let expected_output1int: Vec<usize> = vec![ 22,  52,  56,  86,  90, 117, 124, 128, 152, 158, 164, 187, 192, 226];
            let expected_output2int: Vec<usize> = vec![1, 8, 14, 21, 29, 33, 38, 42, 50, 55, 60, 70, 77, 82, 90, 98, 104, 108, 115, 120, 125, 129, 133, 141, 145, 153, 163, 167, 172, 176, 180, 186, 192, 197, 201, 208, 216, 221, 229, 237, 241, 245];
            let expected_output3int: Vec<usize> = vec![4, 11, 15, 22, 26, 39, 45, 52, 56, 61, 69, 74, 78, 82, 87, 92, 97];


            assert_eq!(output_vector1, expected_output1); // test for signal 1
            assert_eq!(output_vector2, expected_output2); // test for signal 2
            assert_eq!(output_vector3, expected_output3); // test for signal 3
            //assert_eq!(output_vector1int, expected_output1int); // test for signal 1
            //assert_eq!(output_vector2int, expected_output2int); // test for signal 2
            //assert_eq!(output_vector3int, expected_output3int); // test for signal 3

    }

    #[test]
    fn test_run_peakfinder_min_hp_max_hp(){



            //Creating RawData datatype, because peakfinders parameter is RawData
            let input_signal1: RawData= RawData::FloatVec(vec![-1.9683332331608474, -1.717858749355179, -3.759961365429422, -4.958623529379432, -5.485220603297286, -5.068780129646672, -4.96318014526072, -4.885967921675111, -5.829251675123736, -5.47186926387927, -4.047547235539912, -2.603374446559637, -3.946247752610877, -2.524435539984913, -1.797839878650658, -1.1220409621672651, 1.6720838919353374, 1.6955798780859315, 2.343381110638523, 3.218182666426548, 4.358122202583721, 4.765740984503017, 5.3746528409941625, 5.473490191594698, 5.4459250607079674, 4.222194023309575, 3.5631737543611535, 3.209953535535739, 2.2679968750567174, 1.689690757910821, -0.597044682792282, 1.2295096458344235, -0.5099352431494522, 0.47697194842395163, -2.3072239466746938, -3.042292567304973, -3.0447360037997395, -4.4776430466367305, -3.754204593262017, -6.087502919033549, -6.871119514379643, -4.411786302246042, -4.250411245136818, -4.024648954752383, -2.0401752910605495, -1.612949159415131, -2.3769865860842545, -3.15653998158343, -1.7163347916741254, 0.041943799144170235, 1.9018582516181133, 3.2137686101959435, 5.1216168049167985, 5.181272248816972, 4.177162647343236, 4.910559911650967, 5.430561901903032, 4.914839631100418, 4.082933712117779, 4.125764189831912, 3.7388394862747076, 3.7039793267104413, 3.4453653760211003, 1.1568404633907297, 1.1097420809409058, -0.8366844407434536, 0.00032929428028360963, -3.0127224874629523, -3.196935686912258, -4.808196244200207, -2.427739953054134, -5.288749141528557, -5.618464881445853, -3.662019379370501, -3.6482452220249724, -5.135757449930187, -4.660772381705265, -3.181033464835836, -2.183318478654945, -2.3096138598753755, -1.2072178300697296, 0.004073366967373482, 0.7634358906696369, 1.628489695396944, 1.9386947863288453, 2.8495583435889706, 5.59416091360117, 5.735551370915663, 3.5437303978327774, 4.885360913010343, 5.694246040053638, 5.902074521402208, 2.9898795350334995, 4.082546886152893, 4.420324680868482, 2.121238103640503, 1.5554249240012745, 1.0624173628602152, -0.3805941604330543, 0.00011955967508203713, -0.2726198877084691, -3.621165345065073, -2.3106682155706144, -3.008464055318883, -3.6791882243878735, -4.681285864712197, -3.6334225993506166, -4.216214656199944, -3.4899568532177225, -3.548036363731245, -2.886494585475302, -4.936660352815803, -2.590725789953134, -0.9882265278389202, -1.9279100219395602, -1.6026134543636394, 0.02413537999056925, 2.228901718042568, 1.322235456219919, 2.8494026435100954, 3.296661931119425, 6.027538285328892, 4.415979085282228, 5.1100437331543205, 6.295100814736361, 4.157654148903779, 3.8250625551763227, 3.210057612689865, 3.7263865243097665, 2.8724625295607904, 2.548551211873285, -0.7489415406426848, -0.22617745492874, -2.4690964140781864, -3.1401384827052907, -2.95160194936303, -3.968833387736624, -3.2246928010573304, -4.339702569114829, -4.609928246384497, -5.523486704135764, -4.33018351888759, -4.513375833855275, -5.613725875069774, -2.368110485069924, -4.174489468416508, -1.5462599231221796, -1.9112933863303545, -0.7448649061967919, -0.8100404653366764, 1.578768228660318, 3.0605698950709415, 4.481529255021599, 3.4321456403958956, 4.286162492840878, 3.542600865086815, 3.9863354311677752, 4.757085954129289, 4.696489704364847, 4.918603410598548, 3.5493191430519846, 3.666916622021471, 2.649908498384805, -0.7993657203092499, 1.7223957104697152, -1.5785502884870446, -1.5507321245573968, -2.3615494902364422, -1.9385720891906806, -3.30170673067445, -5.686723548491335, -5.69901727429125, -5.582951744522848, -6.659112241922954, -3.835897601355358, -5.404322318188626, -5.3489078376148065, -3.838447935719378, -3.6260649126217097, -3.2306088202096084, -1.0770129610851251, -0.25261828030183275, -1.2157559997094975, 1.9728883910883366, 2.069412523961515, 2.1302651705641797, 3.2818606629781093, 4.648235095453058, 4.345624826872002, 5.311056201049992, 5.753972583478267, 4.966966878966292, 5.687377769469735, 3.378594641228816, 3.724746520942307, 2.5068869273448637, 2.089416643652524, 2.2244325828483476, -1.5274374320264439, -1.5562495323100167, -0.6125119612628858, -2.423479614297431, -3.6936008895358454, -4.388813740752571, -2.854611911820127, -4.826404632800256, -4.572934893501845, -5.256601167670888, -4.099462848728823, -4.33604478745585, -4.816704386332135, -3.4583268405428713, -2.8384466420435683, -1.5125591619739749, -1.7625812266917775, 1.0157214852397545, 1.5095445502150102, 1.870631826947684, 2.0939755781446716, 1.5856545844653414, 2.58196547285172, 3.39753579431135, 5.264149506436597, 5.5893111966405895, 5.532014566927438, 4.3734134489260255, 6.189493491686161, 3.900783751807012, 3.5865611492307488, 0.6888304097686788, 0.10865269854412674, 0.9240575679009976, -0.7873680813469807, -2.7703355600198663, -1.9661351740983313, -3.508800442837363, -1.8306811210565046, -6.640595521684698, -4.777744190652245, -2.7724811787230283, -4.5073250427912415, -6.150295867603678, -3.5490954433689246, -4.787850673669156, -3.591325707404745, -1.0202459490603868, -2.330610271053504, -0.4834974609738696]);        
            let input_signal2: RawData= RawData::FloatVec(vec![57.42375095409937, 56.93672522014874, 62.608713592930876, 58.58999011614217, 53.781514473465975, 59.929765521680004, 62.83874316763905, 61.26564682933764, 60.298077069774514, 65.69037167656037, 64.4924856859658, 57.45776902834044, 67.2979270744406, 64.3065399558438, 69.10913177362237, 69.68135328937724, 66.27441648596799, 66.5712753857469, 68.7197206786976, 66.77069404089671, 69.47343229079385, 73.49687241835524, 74.39038713833476, 69.77134706156811, 71.11611036527033, 71.5514143700266, 70.92527568110486, 75.81690366006418, 71.48430850738842, 73.99189451125514, 77.46501916351879, 75.58651101737665, 78.48004995555802, 75.23963596784876, 80.30163806050568, 77.62973765421143, 80.16175629224077, 80.68837591441441, 79.6905673290241, 83.3649494980984, 83.41729893388869, 81.27997708388136, 82.92243382684352, 83.78103585804621, 83.22618159997842, 84.46526224102954, 84.07977328452601, 81.7653661597366, 83.24232423541409, 82.98821921592604, 84.52930477159329, 86.00457616832857, 84.85465642598282, 79.6146939926643, 83.91264690823981, 84.58107619775576, 86.86586732593057, 86.87782780765482, 86.49708394674948, 84.66183307481079, 83.32273574233504, 89.75815463910952, 81.73921292290746, 83.57667052875678, 82.29154311686115, 81.15090505024507, 81.0181809858243, 80.02406477550639, 79.95626138939767, 80.14968471195097, 77.93833929477205, 83.37140263453084, 80.63006474812504, 80.54886758093564, 74.61328386499513, 76.2067956336496, 75.93496294510105, 74.80986359211977, 79.09967283013746, 73.35452123905561, 76.43997860290371, 73.37084091593962, 72.27187673807346, 76.47512075935063, 73.51588873047531, 74.04609287428879, 73.5220350777692, 71.2657426722753, 69.51314201809633, 70.77160782734013, 68.74978122247276, 71.97834832913482, 68.52537097152933, 68.24617406288941, 69.73725303822009, 70.11807598587777, 69.35509863639831, 69.47650042355208, 66.64598319409271, 68.3345766746571, 66.2569569225079, 66.38695004387625, 58.302036498704005, 59.823489245315685, 63.90206250674178, 67.44946967703007, 64.55800828600442, 64.17137953752636, 64.24996006660133, 64.60722809289496, 62.715507684022455, 62.10266642672423, 62.987139113750466, 62.56118234068753, 60.74277369885567, 61.304485787724424, 63.39768612316597, 59.17504593185429, 60.92293919145394, 61.74329340412283, 57.66140451493842, 62.09807476069308, 61.33026367110421, 59.73879796926617, 58.5720628991695, 59.94647404967808, 62.000588448844795, 60.33024266169896, 60.98985504062868, 58.65602786741151, 59.89716687482642, 57.61316051537118, 57.166505274132426, 58.96556719641834, 60.37679949619507, 54.45584180986487, 58.7271982420652, 59.47366447708427, 56.07940328686498, 55.78066887807596, 54.54564631742577, 54.52126114421135, 56.12296587524522, 55.80474208024708, 55.450268698368774, 53.6860047610941, 56.265818477761954, 51.87808742443517, 54.7399559253531, 56.05143364518187, 52.41066187331751, 49.34598557487828, 50.79534970301276, 50.994619031875516, 54.5066732568543, 45.641877225921085, 45.44783149223058, 49.71813811826957, 49.06417606679746, 48.47113041190944, 45.066752680131536, 45.691797364781955, 46.04972969161036, 46.937126956810964, 48.579890629805696, 46.87831648338302, 43.2621571874902, 42.41539084532762, 47.732792000519055, 42.635078585330035, 45.25466510897015, 44.20457419707335, 39.80087116943825, 43.16784163357121, 42.72139421919673, 40.09690411968018, 39.072075680860785, 39.68721522523129, 39.69694747954145, 38.89958622251241, 36.20930810783846, 38.54348444090701, 39.49315655173681, 37.22306536922959, 38.45119902245094, 38.36169803033943, 36.27817076033729, 38.495487020334416, 36.08203266391632, 35.61234698124961, 37.31850254780822, 35.73508343583559, 34.24509993239897, 38.21302621383962, 35.21073369085666, 34.7557606412574, 38.30832823832005, 37.01263245066287, 38.27243482312153, 35.10563354463935, 36.54702691361821, 37.496545142093524, 40.21495219978659, 33.4472745629568, 36.19003918456128, 40.40279302834972, 39.782856300732334, 38.65349615550868, 39.553456446758894, 43.1239603503975, 38.65895285386617, 41.549607795356614, 41.87845934752343, 41.252783475633485, 41.294266760442, 42.2846785280957, 45.66429780888518, 48.37613972205177, 45.184550578912244, 45.83903707029868, 50.45023663869127, 47.807444589854164, 49.6770059662178, 47.06600589312027, 50.35579734602591, 45.08336916260292, 48.369671422972786, 50.56098595974319, 50.60044633370852, 54.91737419172761, 55.587993290196444, 51.32300551457022, 54.80025666186663, 51.74767705510797, 54.84209797727291, 56.02482448641735, 55.61823652859607, 58.55601631729386, 60.72812364016489, 58.75761743767916, 59.151794377943254, 59.22341098206529, 63.837931340247394, 61.3622177601643, 62.552959520063325, 62.90488582386602, 64.7298637786503, 64.29580055208083, 67.19411603468367]);        
            let input_signal3: RawData= RawData::FloatVec(vec![63.87407990913397, 71.15896719602357, 63.115700010760655, 68.11203109058866, 72.05391225842035, 68.595217178674, 71.07396068414282, 73.90735314927244, 75.4839035341285, 76.78060240194294, 76.41314974618543, 76.9376094238211, 73.69842701540244, 74.17574366773796, 73.0326380102839, 76.72091315093343, 74.76174245960347, 72.90024262451517, 75.27182285015432, 73.11459945191146, 74.32849498567064, 73.49171325726769, 74.51329368373803, 71.51598397989953, 72.38182769266501, 70.56496182932219, 77.18664716195467, 73.13384973861251, 74.36427463981589, 72.61944678630987, 69.50383084779672, 68.41666272735117, 68.00066197110492, 66.95272993698816, 63.22285603871563, 59.54581753245745, 58.868765486270654, 53.59671449821007, 48.50886672965195, 50.26323759552018, 47.055401894516734, 45.16706612246081, 45.024695073406875, 45.03481028625138, 38.213728709093175, 39.54035934310711, 39.660665138759576, 34.2576557239856, 36.822348038273645, 34.62235874386789, 33.36869171435286, 36.390260669335355, 39.22967990022403, 37.585326976253484, 37.2452463982599, 37.80656801392264, 43.80903376008632, 43.013690582871725, 47.78996496029131, 48.498807208314055, 51.413508759186605, 53.629077510159235, 53.48425583367129, 57.666261277173355, 61.636321342438755, 63.59039180025776, 66.45872852613083, 72.32233759795149, 68.99372381654175, 72.03742741326259, 70.58469703221148, 74.68098307844753, 71.39920458555368, 72.42570234770612, 76.18593220732501, 72.99025227337222, 75.99324901804084, 74.95132062904258, 77.6884852912195, 73.27758886599034, 74.0312742601366, 75.6241656923291, 77.33783424602399, 72.7177751858855, 73.66652963798643, 75.45114348891741, 76.17007522000577, 79.94234958288307, 77.3097065768666, 73.03350833349869, 77.46599186741783, 71.8527098841832, 74.99498078410292, 75.01107489300448, 71.6859735945485, 74.38607061603574, 69.37367831813016, 70.29771760531473, 64.91723638143351, 60.51049838366781]);   


            //Creating RawData datatype, because peakfinders parameter is RawData
            let input_signal1int: RawData= RawData::IntVec(vec![-2, -2, -4, -5, -5, -5, -5, -5, -6, -5, -4, -3, -4, -3, -2, -1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 4, 4, 3, 2, 2, -1, 1, -1, 0, -2, -3, -3, -4, -4, -6, -7, -4, -4, -4, -2, -2, -2, -3, -2, 0, 2, 3, 5, 5, 4, 5, 5, 5, 4, 4, 4, 4, 3, 1, 1, -1, 0, -3, -3, -5, -2, -5, -6, -4, -4, -5, -5, -3, -2, -2, -1, 0, 1, 2, 2, 3, 6, 6, 4, 5, 6, 6, 3, 4, 4, 2, 2, 1, 0, 0, 0, -4, -2, -3, -4, -5, -4, -4, -3, -4, -3, -5, -3, -1, -2, -2, 0, 2, 1, 3, 3, 6, 4, 5, 6, 4, 4, 3, 4, 3, 3, -1, 0, -2, -3, -3, -4, -3, -4, -5, -6, -4, -5, -6, -2, -4, -2, -2, -1, -1, 2, 3, 4, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3, -1, 2, -2, -2, -2, -2, -3, -6, -6, -6, -7, -4, -5, -5, -4, -4, -3, -1, 0, -1, 2, 2, 2, 3, 5, 4, 5, 6, 5, 6, 3, 4, 3, 2, 2, -2, -2, -1, -2, -4, -4, -3, -5, -5, -5, -4, -4, -5, -3, -3, -2, -2, 1, 2, 2, 2, 2, 3, 3, 5, 6, 6, 4, 6, 4, 4, 1, 0, 1, -1, -3, -2, -4, -2, -7, -5, -3, -5, -6, -4, -5, -4, -1, -2, 0]);        
            let input_signal2int: RawData= RawData::IntVec(vec![57, 63, 59, 54, 60, 63, 61, 60, 66, 64, 57, 67, 64, 69, 70, 66, 67, 69, 67, 69, 73, 74, 70, 71, 72, 71, 76, 71, 74, 77, 76, 78, 75, 80, 78, 80, 81, 80, 83, 83, 81, 83, 84, 83, 84, 84, 82, 83, 83, 85, 86, 85, 80, 84, 85, 87, 87, 86, 85, 83, 90, 82, 84, 82, 81, 81, 80, 80, 80, 78, 83, 81, 81, 75, 76, 76, 75, 79, 73, 76, 73, 72, 76, 74, 74, 74, 71, 70, 71, 69, 72, 69, 68, 70, 70, 69, 69, 67, 68, 66, 66, 58, 60, 64, 67, 65, 64, 64, 65, 63, 62, 63, 63, 61, 61, 63, 59, 61, 62, 58, 62, 61, 60, 59, 60, 62, 60, 61, 59, 60, 58, 57, 59, 60, 54, 59, 59, 56, 56, 55, 55, 56, 56, 55, 54, 56, 52, 55, 56, 52, 49, 51, 51, 55, 46, 45, 50, 49, 48, 45, 46, 46, 47, 49, 47, 43, 42, 48, 43, 45, 44, 40, 43, 43, 40, 39, 40, 40, 39, 36, 39, 39, 37, 38, 38, 36, 38, 36, 36, 37, 36, 34, 38, 35, 35, 38, 37, 38, 35, 37, 37, 40, 33, 36, 40, 40, 39, 40, 43, 39, 42, 42, 41, 41, 42, 46, 48, 45, 46, 50, 48, 50, 47, 50, 45, 48, 51, 51, 55, 56, 51, 55, 52, 55, 56, 56, 59, 61, 59, 59, 59, 64, 61, 63, 63, 65, 64, 67]);        
            let input_signal3int: RawData= RawData::IntVec(vec![64, 71, 63, 68, 72, 69, 71, 74, 75, 77, 76, 77, 74, 74, 73, 77, 75, 73, 75, 73, 74, 73, 75, 72, 72, 71, 77, 73, 74, 73, 70, 68, 68, 67, 63, 60, 59, 54, 49, 50, 47, 45, 45, 45, 38, 40, 40, 34, 37, 35, 33, 36, 39, 38, 37, 38, 44, 43, 48, 48, 51, 54, 53, 58, 62, 64, 66, 72, 69, 72, 71, 75, 71, 72, 76, 73, 76, 75, 78, 73, 74, 76, 77, 73, 74, 75, 76, 80, 77, 73, 77, 72, 75, 75, 72, 74, 69, 70, 65, 61]);   
            

            let minimum_height: f32 = 0.0;
            let maximum_height: f32 = 50.0;
            let minimum_prominence: f32 = 0.0;
            let maximum_prominence: f32 = 4.0;

            //Initiating Peak Finder filter
            let mut filter: PeakFinder = PeakFinder::new();
        
            //Running the run_peakfinder function in the Peak_Finder data struct
            let output1: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal1,minimum_height, minimum_prominence, maximum_height, maximum_prominence);
            let output2: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal2,minimum_height, minimum_prominence, maximum_height, maximum_prominence);
            let output3: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal3,minimum_height, minimum_prominence, maximum_height, maximum_prominence);

              //Running the run_peakfinder function in the Peak_Finder data struct
            let output1int: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal1int,minimum_height, minimum_prominence, maximum_height, maximum_prominence);
            let output2int: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal2int,minimum_height, minimum_prominence, maximum_height, maximum_prominence);
            let output3int: Vec<Peak<f32>> = filter.run_peakfinder_min_hp_max_hp(&input_signal3int,minimum_height, minimum_prominence, maximum_height, maximum_prominence);
       
        
            let mut output_vector1: Vec<usize> = Vec::new();
            let mut output_vector2: Vec<usize> = Vec::new();
            let mut output_vector3: Vec<usize> = Vec::new();

            let mut output_vector1int: Vec<usize> = Vec::new();
            let mut output_vector2int: Vec<usize> = Vec::new();
            let mut output_vector3int: Vec<usize> = Vec::new();
        
        
            //converting the output from Vec<Peak<f32>> form to Vec<usize> form
            let mut output_vector1: Vec<usize> = output1.iter().map(|element| element.middle_position()).collect();
            output_vector1.sort();
        
            let mut output_vector2: Vec<usize> = output2.iter().map(|element| element.middle_position()).collect();
            output_vector2.sort();
        
            let mut output_vector3: Vec<usize> = output3.iter().map(|element| element.middle_position()).collect();
            output_vector3.sort();


            let mut output_vector1int: Vec<usize> = output1int.iter().map(|element| element.middle_position()).collect();
            output_vector1int.sort();
        
            let mut output_vector2int: Vec<usize> = output2int.iter().map(|element| element.middle_position()).collect();
            output_vector2int.sort();
        
            let mut output_vector3int: Vec<usize> = output3int.iter().map(|element| element.middle_position()).collect();
            output_vector3int.sort();


            let expected_output1: Vec<usize> = vec![ 31,  33,  53,  59,  66,  87,  94,  99, 117, 121, 128, 152, 154 ,157, 161, 164, 187, 192 ,194, 197, 218, 223 ,231];
            let expected_output2: Vec<usize> = vec![164, 170, 173, 178, 182, 184, 187, 190, 193, 196, 198, 205, 212, 217, 222];
            let expected_output3: Vec<usize> = vec![43, 46, 48,52, 56];

            let expected_output1int: Vec<usize> = vec![31, 33, 66, 93, 117, 128, 132, 152, 164, 181, 187, 194, 231];
            let expected_output2int: Vec<usize> = vec![163, 169, 172, 176, 180, 183, 186, 189, 192, 195, 197, 204, 208, 210, 216];
            let expected_output3int: Vec<usize> = vec![39, 45, 48, 52, 56];

            assert_eq!(output_vector1, expected_output1); // test for signal 1
            assert_eq!(output_vector2, expected_output2); // test for signal 2
            assert_eq!(output_vector3, expected_output3); // test for signal 3

            //assert_eq!(output_vector1int, expected_output1int); // test for signal 1
                    //left: `[26, 29, 31, 33, 60, 64, 66, 94, 96, 100, 117, 126, 128, 130, 132, 152, 161, 164, 181, 187, 194, 197, 228, 231]`,
                    //right: `[31, 33, 66, 93, 117, 128, 132, 152, 164, 181, 187, 194, 231]
           
           //assert_eq!(output_vector2int, expected_output2int); // test for signal 2 
                    //left: `[163, 169, 173, 177, 181, 184, 186, 189, 192, 195, 197, 205, 208, 211, 216]`
                    //right:`[163, 169, 172, 176, 180, 183, 186, 189, 192, 195, 197, 204, 208, 210, 216]
            
            //assert_eq!(output_vector3int, expected_output3int); // test for signal 3
                    //left: `[39, 43, 46, 48, 52, 56]`
                    //right:`[39, 45, 48, 52, 56]`


    }

}